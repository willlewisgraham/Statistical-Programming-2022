print(paste(i,j))
}
}
p=2
for (i in 1:p){
for (j in 1:i){
print(paste(i,j))
}
}
eps = 1e-6
p=2
eps_vector <- matrix(eps,p)
eps_vector
hess_with_finite_differencing <- function(current_theta, grad, eps){
# This function uses finite differencing to approximate the hessian matrix
# of an objective function with respect to a supplied parameter vector of
# thetas.
#
# Inputs:
# current_theta - a parameter vector that the hessian will be evaluated at
# grad - the gradient function. Returns the gradient vector of the objective
# w.r.t. the elements of parameter vector
#
# Returns:
# a Hessian matrix approximated with finite differencing
gradient_theta <- grad(current_theta)
p = length(gradient_theta)
hess <- matrix(0,p,p)
for (i in 1:p){
for (j in 1:i){
change_vector <- matrix(0,p)[j] + eps
hess[i,j] <- gradient_theta[i] - grad(theta[j]+eps)
}
}
hess <- hess*eps
return(hess)
}
test <- hess_with_finite_differencing(c(10,10), gb, 1e-6)
hess_with_finite_differencing <- function(current_theta, grad, eps){
# This function uses finite differencing to approximate the hessian matrix
# of an objective function with respect to a supplied parameter vector of
# thetas.
#
# Inputs:
# current_theta - a parameter vector that the hessian will be evaluated at
# grad - the gradient function. Returns the gradient vector of the objective
# w.r.t. the elements of parameter vector
#
# Returns:
# a Hessian matrix approximated with finite differencing
gradient_theta <- grad(current_theta)
p = length(gradient_theta)
hess <- matrix(0,p,p)
for (i in 1:p){
for (j in 1:i){
change_vector <- matrix(0,p)[j] + eps
hess[i,j] <- (gradient_theta[i] - grad(theta[j]+eps))[j]
}
}
hess <- hess*eps
return(hess)
}
test <- hess_with_finite_differencing(c(10,10), gb, 1e-6)
test
debug(hess_with_finite_differencing)
hess_with_finite_differencing(c(10,10), gb, 1e-6)
hess[0][0]
i
j
change_vector
undebug(hess_with_finite_differencing)
hess_with_finite_differencing <- function(current_theta, grad, eps){
# This function uses finite differencing to approximate the hessian matrix
# of an objective function with respect to a supplied parameter vector of
# thetas.
#
# Inputs:
# current_theta - a parameter vector that the hessian will be evaluated at
# grad - the gradient function. Returns the gradient vector of the objective
# w.r.t. the elements of parameter vector
#
# Returns:
# a Hessian matrix approximated with finite differencing
gradient_theta <- grad(current_theta)
p = length(gradient_theta)
hess <- matrix(0,p,p)
for (i in 1:p){
for (j in 1:i){
change_vector <- matrix(0,p)
change_vector[j] <- eps
hess[i,j] <- (gradient_theta[i] - grad(theta[j]+eps))[j]
}
}
hess <- hess*eps
return(hess)
}
test <- hess_with_finite_differencing(c(10,10), gb, 1e-6)
test
debug(hess_with_finite_differencing)
hess_with_finite_differencing(c(10,10), gb, 1e-6)
change_vector
gradient_theta[i]
theta[j]
grad(10,10)
grad(c(10,10))
undebug(hess_with_finite_differencing)
hess_with_finite_differencing <- function(current_theta, grad, eps){
# This function uses finite differencing to approximate the hessian matrix
# of an objective function with respect to a supplied parameter vector of
# thetas.
#
# Inputs:
# current_theta - a parameter vector that the hessian will be evaluated at
# grad - the gradient function. Returns the gradient vector of the objective
# w.r.t. the elements of parameter vector
#
# Returns:
# a Hessian matrix approximated with finite differencing
gradient_theta <- grad(current_theta)
p = length(gradient_theta)
hess <- matrix(0,p,p)
for (i in 1:p){
for (j in 1:i){
change_vector <- matrix(0,p)
change_vector[j] <- eps
hess[i,j] <- (gradient_theta[i] - grad(theta+eps))[j]
}
}
hess <- hess*eps
return(hess)
}
test <- hess_with_finite_differencing(c(10,10), gb, 1e-6)
test
hess_with_finite_differencing <- function(current_theta, grad, eps){
# This function uses finite differencing to approximate the hessian matrix
# of an objective function with respect to a supplied parameter vector of
# thetas.
#
# Inputs:
# current_theta - a parameter vector that the hessian will be evaluated at
# grad - the gradient function. Returns the gradient vector of the objective
# w.r.t. the elements of parameter vector
#
# Returns:
# a Hessian matrix approximated with finite differencing
gradient_theta <- grad(current_theta)
p = length(gradient_theta)
hess <- matrix(0,p,p)
for (i in 1:p){
for (j in 1:i){
change_vector <- matrix(0,p)
change_vector[j] <- eps
hess[i,j] <- (gradient_theta[i] - grad(theta+eps))[j]
}
}
hess <- hess/eps
return(hess)
}
test <- hess_with_finite_differencing(c(10,10), gb, 1e-6)
test
hess_with_finite_differencing <- function(current_theta, grad, eps){
# This function uses finite differencing to approximate the hessian matrix
# of an objective function with respect to a supplied parameter vector of
# thetas.
#
# Inputs:
# current_theta - a parameter vector that the hessian will be evaluated at
# grad - the gradient function. Returns the gradient vector of the objective
# w.r.t. the elements of parameter vector
#
# Returns:
# a Hessian matrix approximated with finite differencing
gradient_theta <- grad(current_theta)
p = length(gradient_theta)
hess <- matrix(0,p,p)
for (i in 1:p){
for (j in 1:i){
change_vector <- matrix(0,p)
change_vector[j] <- eps
hess[i,j] <-  (grad(theta + change_vector) - gradient_theta[i])[i]
}
}
hess <- hess/eps
return(hess)
}
test <- hess_with_finite_differencing(c(10,10), gb, 1e-6)
test
test
(test + t(test))2
(test + t(test))/2
(test + t(test)) - diag(test)
diag(test)
test*2 - diag(test)
test*2
(test + t(t))
test + t(t)
test + t(test)
(test + t(test)) - diag(test)
diag(test)
(test + t(test)) - diag(diag(test))
hess_with_finite_differencing <- function(current_theta, grad, eps){
# This function uses finite differencing to approximate the hessian matrix
# of an objective function with respect to a supplied parameter vector of
# thetas.
#
# Inputs:
# current_theta - a parameter vector that the hessian will be evaluated at
# grad - the gradient function. Returns the gradient vector of the objective
# w.r.t. the elements of parameter vector
#
# Returns:
# a Hessian matrix approximated with finite differencing
gradient_theta <- grad(current_theta)
p = length(gradient_theta)
hess <- matrix(0,p,p)
for (i in 1:p){
for (j in 1:i){
change_vector <- matrix(0,p)
change_vector[j] <- eps
hess[i,j] <-  (grad(theta + change_vector) - gradient_theta[i])[i]
}
}
hess <- hess/eps
hess <- (hess + t(hess)) - diag(diag(hess))
return(hess)
}
test <- hess_with_finite_differencing(c(10,10), gb, 1e-6)
test
test
length(test)
dim(test)
dim(test)[1]
hess_with_finite_differencing <- function(current_theta, grad, eps){
# This function uses finite differencing to approximate the hessian matrix
# of an objective function with respect to a supplied parameter vector of
# thetas.
#
# Inputs:
# current_theta - a parameter vector that the hessian will be evaluated at
# grad - the gradient function. Returns the gradient vector of the objective
# w.r.t. the elements of parameter vector
#
# Returns:
# a Hessian matrix approximated with finite differencing
gradient_theta <- grad(current_theta)
p = length(gradient_theta)
hess <- matrix(0,p,p)
for (i in 1:p){
for (j in 1:i){
change_vector <- matrix(0,p)
change_vector[j] <- eps
hess[i,j] <-  (grad(theta + change_vector) - gradient_theta[i])[i]
}
}
hess <- hess/eps
hess <- (hess + t(hess)) - diag(diag(hess))
return(hess)
}
test <- hess_with_finite_differencing(c(9.98,99.5), gb, 1e-6)
rb <- function(th,k=2) {
k*(th[2]-th[1]^2)^2 + (1-th[1])^2
}
gb <- function(th,k=2) {
c(-2*(1-th[1])-k*4*th[1]*(th[2]-th[1]^2),k*2*(th[2]-th[1]^2))
}
hb <- function(th,k=2) {
h <- matrix(0,2,2)
h[1,1] <- 2-k*2*(2*(th[2]-th[1]^2) - 4*th[1]^2)
h[2,2] <- 2*k
h[1,2] <- h[2,1] <- -4*k*th[1]
}
theta = c(10,10)
test <- newt(theta, rb, gb, hb, 2)
debug(hess_with_finite_differencing)
hess_with_finite_differencing(c(10,10), gb, 1e-6)
undebug(hess_with_finite_differencing)
test <- hess_with_finite_differencing(c(9.98,99.5), gb, 1e-6)
test
gb(9.98, 99.5)
gb(c(9.98, 99.5))
theta
theta + 0.1*c(-1,-1)
c(1,1)
matrix(c(1,1))
mat <- matrix(c(1,1))
mat
double(mat)
as.vector(mat)
gb(c(10,10))
gb(c(9.98,99.5))
gb(9.97507, 99.50140)
gb(c(9.97507, 99.50140))
mat
typeof(mat)
test <- matrix(c(1,1,1,1),2,2)
dim(0)
length(NULL)
test
matrix(test)
dim(0)
length(NULL)
diag(0)
diag(NULL)
test
as.matrix(test)
as.matrix(0)
hess <- 0
diag(hess)
diag(diag(hess))
hess <- (hess + t(hess)) - diag(diag(hess))
hess
hess = matrix(c(0))
hess
diag(hess)
diag(diag(hess))
hess <- (hess + t(hess)) - diag(diag(hess))
hess + t(hess)
diag(hess)
diag(diag(hess))
hess <- (hess + t(hess)) - diag(as.matrxi(diag(hess)))
hess <- (hess + t(hess)) - diag(as.matrix(diag(hess)))
hess
hess = matrix(c(0))
hess
hess <- (hess + t(hess)) - diag(as.matrix(diag(hess)))
hess
hess <- matrix(c(1,0,0,1),2,2)
hess
hess <- matrix(c(1,1,0,1),2,2)
hess
hess <- (hess + t(hess)) - diag(as.matrix(diag(hess)))
hess
hess <- matrix(c(1,1,0,1),2,2)
hess
diag(hess)
as.matrix(diag(hess))
diag(as.matrix(diag(hess)))
hess <- matrix(c(1,1,0,1),2,2)
dim(hess)
diag(as.matrix(hess))
dim(as.matrix(hess))
hess = matrix(c(1))
hess
hess <- (hess + t(hess)) - diag(as.matrix(diag(hess)))
hess
hessian <- matrix(c(0))
hess <- (hess + t(hess)) - diag(as.matrix(diag(hess)))
hess <- matrix(c(0))
hess <- (hess + t(hess)) - diag(diag(hess))
hess <- matrix(c(1))
hess <- (hess + t(hess)) - diag(diag(hess))
hess
diag(9)
zero <- matrix(c(0))
one <- matrix(c(1))
diag(zero)
diag(one)
diag(1)
diag(0)
diag(2)
one
hess <- one
hess <- (hess + t(hess)) - diag(diag(hess))
hess
hess <- matrix(c(1,1,0,1),2,2)
hess
hess <- t(hess - diag(hess)) + hess
hess
hess <- matrix(c(1,1,0,1),2,2)
diag(hess)
comn(3)
combn(3)
combn(3,3)
?lower.tr
?lower.tri
hess
lower.tri(hess)
hess[lower.tri(hess)]
hess[upper.tri(hess)]
hess
hess[upper.tri(hess)] <- hess[lower.tri(hess)]
hess
hess(c(0))
hess <- matrix(c(0)
hess <- matrix(c(0))
hess
hess[upper.tri(hess)] <- hess[lower.tri(hess)]
hess
hess <- matrix(c(1,2,3,4,5,6,7,8,9), 3, 3)
hess
hess[upper.tri(hess)] <- hess[lower.tri(hess)]
hess
hess_with_finite_differencing <- function(current_theta, grad, eps){
# This function uses finite differencing to approximate the hessian matrix
# of an objective function with respect to a supplied parameter vector of
# thetas.
#
# Inputs:
# current_theta - a parameter vector that the hessian will be evaluated at
# grad - the gradient function. Returns the gradient vector of the objective
# w.r.t. the elements of parameter vector
#
# Returns:
# a Hessian matrix approximated with finite differencing
gradient_theta <- grad(current_theta)
p = length(gradient_theta)
hess <- matrix(0,p,p)
for (i in 1:p){
for (j in 1:i){
change_vector <- matrix(0,p)
change_vector[j] <- eps
hess[i,j] <-  (grad(theta + change_vector) - gradient_theta[i])[i]
}
}
hess <- hess/eps
hess[upper.tri(hess)] <- hess[lower.tri(hess)]
return(hess)
}
newt <- function(theta, func, grad, hess = NULL, ..., tol = 1e-8, fscale = 1,   maxit = 100, max.half = 20, eps = 1e-6){
# if no hessian matrix function is supplied, default to finite differencing
hess.supplied <- TRUE # Default to assume hessian is supplied
if(is.null(hess)){ # If hessian is not supplied
hess.supplied <- FALSE #
}
obj_at_theta <- func(theta) # evaluate objective function at initial theta
grad_at_theta <- grad(theta) # evaluate gradient at initial theta
if(hess.supplied){
hess_at_theta <- hess(theta) # evaluate hessian at inital theta
} else {
hess_at_theta <- hess_with_finite_differencing(theta, grad, eps)
}
# combine obj, gradient, and hessian values at theta into 1 vector
obj_and_derivatives <- c(obj_at_theta, grad_at_theta, hess_at_theta)
if (Inf %in% obj_and_derivatives | -Inf %in% obj_and_derivatives){
stop("Objective Funciton or Derivatives Not Finite at Initial Theta")
}
i <- 0 # Tracks the iterations.
while(i < maxit){
original_theta <- theta
obj_at_theta <- func(theta)
grad_at_theta <- grad(theta)
if(hess.supplied){
hess_at_theta <- hess(theta) # evaluate hessian at inital theta
} else {
hess_at_theta <- hess_with_finite_differencing(theta, grad, eps)
}
chol_of_hess <- try(chol(hess_at_theta), silent = TRUE)
eig_hess <- eigen(hess_at_theta) # Computes the eigen-decomposition on the     # hessian matrix.
lambdas <- eig_hess$values # Identifies the lambdas from the                # eigen-decomposition.
U <- eig_hess$vectors # Identifies the U from the eigen-decomposition of       # the hessian matrix or the perturbed hessian matrix
if(all(class(chol_of_hess) == 'try-error')){
hess_is_pd <- FALSE
if(0 %in% lambdas){
hess_is_inv <- FALSE
} else {
hess_is_inv <- TRUE
inv_hess_before_perturb <- U %*% (diag(1/lambdas)) %*% t(U) # Calculates the inverse of       # the hessian matrix.
}
pert_hess_at_theta <- hess_at_theta + (-(min(lambdas)) + 1) * diag(dim(as.matrix(hess_at_theta))[1]) # perturb the hessian matrix.
eig_hess <- eigen(pert_hess_at_theta) # Computes the
# eigen-decomposition on the perturbed hessian matrix.
lambdas <- eig_hess$values # Identifies the lambdas from the                  # eigen-decomposition of the perturbed hessian matrix.
U <- eig_hess$vectors # Identifies the U from the eigen-decomposition of       # the hessian matrix or the perturbed hessian matrix
} else {
hess_is_pd <- TRUE
}
inv_hess <- U %*% (diag(1/lambdas)) %*% t(U) # Calculates the inverse of       # the hessian matrix.
if(sum(abs(grad_at_theta) < tol * abs(obj_at_theta) + fscale) == length(theta)){
if(hess_is_pd){
return(list('f' = obj_at_theta, 'theta' = theta, 'iter' = i, 'g' = grad_at_theta, 'Hi' = inv_hess))
}
warning('Hessian is not positive definite at convergence.\n')
if(hess_is_inv){
return(list('f' = obj_at_theta, 'theta' = theta, 'iter' = i, 'g' = grad_at_theta, 'Hi' = inv_hess_before_perturb))
}
return(list('f' = obj_at_theta, 'theta' = theta, 'iter' = i, 'g' = grad_at_theta, 'Hi' = "Hessian is not invertible"))
}
descent_direction <- as.vector(-inv_hess %*% grad_at_theta)
stepsize <- 1
halves <- 0
theta_hat <- theta +  stepsize * descent_direction
suppressWarnings(
while((obj_at_theta < func(theta_hat) && halves <= max.half) | (!(is.finite(func(theta_hat))) && halves <= max.half)){
stepsize <- stepsize / 2
theta_hat <- theta +  stepsize * descent_direction
halves <- halves + 1
}
)
if(halves == (max.half + 1)){
warning("Maximum number of step halvings reached \n")
if(hess_is_pd){
return(list('f' = obj_at_theta, 'theta' = theta, 'iter' = i, 'g' = grad_at_theta, 'Hi' = inv_hess))
}
warning('Hessian is not positive definite at convergence.\n')
if(hess_is_inv){
return(list('f' = obj_at_theta, 'theta' = theta, 'iter' = i, 'g' = grad_at_theta, 'Hi' = inv_hess_before_perturb))
}
return(list('f' = obj_at_theta, 'theta' = theta, 'iter' = i, 'g' = grad_at_theta, 'Hi' = "Hessian is not invertible"))
}
theta <- theta_hat
i <- i + 1
}
warning("Maximum iterations reached without convergence \n")
if(hess_is_pd){
return(list('f' = obj_at_theta, 'theta' = original_theta, 'iter' = maxit, 'g' = grad_at_theta, 'Hi' = inv_hess))
}
warning('Hessian is not positive definite at max iterations.\n')
if(hess_is_inv){
return(list('f' = obj_at_theta, 'theta' = original_theta, 'iter' = maxit, 'g' = grad_at_theta, 'Hi' = inv_hess_before_perturb))
}
return(list('f' = obj_at_theta, 'theta' = original_theta, 'iter' = maxit, 'g' = grad_at_theta, 'Hi' = "Hessian is not invertible"))
}
